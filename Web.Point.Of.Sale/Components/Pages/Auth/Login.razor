@page "/account/login"
@using Web.Point.Of.Sale.Services.Auth
@using Web.Point.Of.Sale.Services.Auth.Models
@rendermode InteractiveServer
@inject IAuthService AuthService

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" @bind-Value="userName"/>
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!" @bind-Value="userEmail"/>
                @* Validation="@(new EmailAddressAttribute { ErrorMessage = "The email address is invalid" })"/> *@
                <MudTextField T="string" Label="Password" @bind-Value="userPassWord"
                              InputType="InputType.Password" Required="true"
                              RequiredError="Password is required!"/>
                <MudTextField T="string" Label="Tenant" InputType="InputType.Number" @bind-Value="userTenant"/>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="ValidateLogin">Login</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(() => form.ResetAsync())" Class="mx-2">Reset</MudButton>
            @* <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(() => form.ResetValidation())">Reset Validation</MudButton> *@
        </MudPaper>
    </MudItem>
    @* <MudItem xs="12" sm="5"> *@
    @*     <MudPaper Class="pa-4 mud-height-full"> *@
    @*         <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText> *@
    @*         @foreach (var error in errors) *@
    @*         { *@
    @*             <MudText Color="@Color.Error">@error</MudText> *@
    @*         } *@
    @*     </MudPaper> *@
    @* </MudItem> *@
</MudGrid>


@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    string userName;
    string userEmail;
    string userPassWord;
    string userTenant;

    private async Task ValidateLogin()
    {
        var token = await AuthService.ValidateUser(new ValidateUserRequest
        {
            UserName = "User1",
            Password = "UserPass&1",
            Email = "user1@user.com",
            TenantId = 4
        });

        var test = await AuthService.GetUserDetails(new UserExistRequest
        {
            UserName = "User1",
            Email = "user1@user.com",
            TenantId = 4
        }, token);
        // {
        //     "userName": "User1",
        //     "password": "UserPass&1",
        //     "email": "user1@user.com",
        //     "tenantId": 4
        // }
        Console.WriteLine(userName);
        Console.WriteLine(userEmail);
        Console.WriteLine(userPassWord);
        Console.WriteLine(userTenant);
    }

    // private IEnumerable<string> PasswordStrength(string pw)
    // {
    //     if (string.IsNullOrWhiteSpace(pw))
    //     {
    //         yield return "Password is required!";
    //         yield break;
    //     }
    //
    //     if (pw.Length < 8)
    //         yield return "Password must be at least of length 8";
    //     if (!Regex.IsMatch(pw, @"[A-Z]"))
    //         yield return "Password must contain at least one capital letter";
    //     if (!Regex.IsMatch(pw, @"[a-z]"))
    //         yield return "Password must contain at least one lowercase letter";
    //     if (!Regex.IsMatch(pw, @"[0-9]"))
    //         yield return "Password must contain at least one digit";
    // }
    //
    // private string PasswordMatch(string arg)
    // {
    //     if (pwField1.Value != arg)
    //         return "Passwords don't match";
    //     return null;
    // }


}

@* <MudAppBar> *@
@*     <MudText Typo="Typo.h6">My App</MudText> *@
@*     <Spacer/> *@
@*     <MudIconButton Icon="@Icons.Material.Filled.Menu" OnClick="@ToggleDrawer"/> *@
@* </MudAppBar> *@
@* *@
@* <MudButton Variant="Variant.Filled">Default</MudButton> *@
@* <MudButton Variant="Variant.Filled" Color="Color.Primary">Primary</MudButton> *@
@* <MudButton Variant="Variant.Filled" Color="Color.Secondary">Secondary</MudButton> *@
@* <MudButton Variant="Variant.Filled" Disabled="true">Disabled</MudButton> *@
@* *@
@* <MudAlert Severity="Severity.Normal">The reactor type is RBMK-1000</MudAlert> *@
@* <MudAlert Severity="Severity.Info">The reactor was fired up successfully</MudAlert> *@
@* <MudAlert Severity="Severity.Success">The reactor is running at optimum temperature</MudAlert> *@
@* <MudAlert Severity="Severity.Warning">The reactor temperature exceeds the optimal range</MudAlert> *@
@* <MudAlert Severity="Severity.Error">Meltdown is imminent</MudAlert> *@
@* *@
@* *@
@* @code { *@
@* *@
@*     private void ToggleDrawer() *@
@*     { *@
@*         throw new NotImplementedException(); *@
@*     } *@
@* *@
@* } *@
