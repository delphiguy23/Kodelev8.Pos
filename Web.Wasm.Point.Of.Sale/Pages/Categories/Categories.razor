@page "/categories"

@using System.Text.Json
@using global::Point.Of.Sale.Models.Categories
@using global::Point.Of.Sale.Models.Supplier
@using Web.Wasm.Point.Of.Sale.Services.Categories
@using Web.Wasm.Point.Of.Sale.Services.Tenant

@inject ITenantService TenantService
@inject ICategoriesService CategoriesService
@inject IDialogService DialogService

<PageTitle>Categories</PageTitle>

<br/>

<MudSelectExtended
    T="string"
    MultiSelection="false"
    SearchBox="true"
    SearchBoxAutoFocus="true"
    Label="Tenant"
    AnchorOrigin="Origin.BottomCenter"
    Variant="Variant.Outlined"
    HelperText="Search for Tenants"
    SearchBoxClearable="true"
    @bind-Value="@selectedTenant"
    ItemCollection="@EnumTenantToStringArray()"
    TextChanged="OnTenantSelected"
/>

<br/>

<h1>@((selectedTenantId ?? 0) > 0 ? "Categories Page" : $"{selectedTenant} - Categories")</h1>

<br/>

<MudGrid Class="d-flex flex-column flex-grow-1 gap-4">
    <MudItem>
        <MudPaper Elevation="15">
            <MudDataGrid
                T="CategoryResponse"
                Items="@categories"
                EditMode="DataGridEditMode.Form"
                StartedEditingItem="@StartedEditingItem"
                CanceledEditingItem="@CanceledEditingItem"
                CommittedItemChanges="@CommittedItemChanges"
                EditTrigger="DataGridEditTrigger.Manual"
                ReadOnly="false"
                Hover="true"
                Filterable="true"
                FilterMode="DataGridFilterMode.Simple"
                FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
                <Columns>
                    <HierarchyColumn T="CategoryResponse"  />
                    <PropertyColumn Property="x => x.Name" Title="Name"/>
                    <PropertyColumn Property="x => x.Description" Title="Description"/>
                    <PropertyColumn Property="x => x.Active" Title="Active"/>
                    <TemplateColumn Title="Edit" Filterable="false">
                        <CellTemplate>
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Add" Color="Color.Tertiary" @onclick="AddRow"/>
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" OnClick="@(() => EditRow(context.Item))"/>
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => DeleteRow(context.Item))"/>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudPaper>
    </MudItem>
</MudGrid>
<br/>

<MudFab class="d-flex" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" @onclick="@AddRow"/>

@code
{
    private IEnumerable<CategoryResponse> categories = new List<CategoryResponse>();
    private IEnumerable<Services.Tenant.Models.Tenant> tenants = new List<Services.Tenant.Models.Tenant>();

    private List<string> _events = new();

    private DialogOptions options = new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Small, CloseButton = false, DisableBackdropClick = true, NoHeader = false, Position = DialogPosition.Center, CloseOnEscapeKey = false };
    private string selectedTenant { get; set; }
    private int? selectedTenantId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var resultsTenant = await TenantService.GetAll();
        tenants = resultsTenant.Value;
    }

    // events
    void StartedEditingItem(CategoryResponse item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(CategoryResponse item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(CategoryResponse item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {JsonSerializer.Serialize(item)}");
    }

    private async Task EditRow(CategoryResponse item)
    {
        // var parameters = new DialogParameters<UpsertDialog> { { x => x.supplier, item }, {x => x.selectedTenantId, selectedTenantId} };

        // var dialog = await DialogService.ShowAsync<UpsertDialog>("Upsert", parameters, options);
        // var result = await dialog.Result;
        //
        // if (!result.Canceled)
        // {
        //     RefreshData();
        // }
        await Task.Delay(1);
    }

    private async Task AddRow()
    {
        var parameters = new DialogParameters<UpsertDialog> { {x => x.selectedTenantId, selectedTenantId} };

        var dialog = await DialogService.ShowAsync<UpsertDialog>("Add", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            RefreshData();
        }
    }

    private async Task DeleteRow(CategoryResponse item)
    {

    }

    private string[] EnumTenantToStringArray()
    {
        List<string> tenantTypeList = new ();
        return tenants.Select(t => t.Name).ToArray();
    }

    private async Task OnTenantSelected(string value)
    {
        selectedTenantId = tenants.FirstOrDefault(t => t.Name == value).Id;
        var resultCategories = await CategoriesService.GetByTenantId(selectedTenantId ?? 0);
        // categories = resultCategories.Value.Where(s => s.TenantId == tenants.FirstOrDefault(t => t.Name == value).Id).ToList();
        // selectedTenantId = tenants.FirstOrDefault(t => t.Name == value).Id;
    }

    private async Task RefreshData()
    {
        var resultCategories = await CategoriesService.GetByTenantId(selectedTenantId ?? 0);

        categories = Enumerable.Empty<CategoryResponse>();
        categories = resultCategories.Value.ToList();
        this.StateHasChanged();
    }
}
