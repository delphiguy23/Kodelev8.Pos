@page "/tenant"
@using System.Text.Json
@using Web.Wasm.Point.Of.Sale.Services.Enum
@using Web.Wasm.Point.Of.Sale.Services.Tenant

@inject NavigationManager NavigationManager
@inject ITenantService TenantService
@inject IDialogService DialogService

@* <MudDialogProvider *@
@*     FullWidth="true" *@
@*     MaxWidth="MaxWidth.Small" *@
@*     CloseButton="false" *@
@*     DisableBackdropClick="true" *@
@*     NoHeader="false" *@
@*     Position="DialogPosition.Center" *@
@*     CloseOnEscapeKey="false"/> *@

<PageTitle>Tenant</PageTitle>

<h1>Tenant</h1>
<br/>

<MudGrid Class="d-flex flex-column flex-grow-1 gap-4">
    <MudItem>
        <MudPaper Elevation="15">
            <MudDataGrid
                T="Services.Tenant.Models.Tenant"
                Items="@tenants"
                EditMode="DataGridEditMode.Form"
                StartedEditingItem="@StartedEditingItem"
                CanceledEditingItem="@CanceledEditingItem"
                CommittedItemChanges="@CommittedItemChanges"
                EditTrigger="DataGridEditTrigger.Manual"
                ReadOnly="false"
                Hover="true"
                Filterable="true"
                FilterMode="DataGridFilterMode.Simple"
                FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
                <Columns>
                    @* <PropertyColumn Property="x => x.Id" Title="Id"/> *@
                    <PropertyColumn Property="x => x.Name" Title="Name"/>
                    <PropertyColumn Property="x => x.Type"/>
                    <PropertyColumn Property="x => x.Code" Title="Code"/>
                    <PropertyColumn Property="x => x.Email" Title="Email"/>
                    <PropertyColumn Property="x => x.Active" Title="Active"/>
                    <TemplateColumn Title="Edit" Filterable="false">
                        <CellTemplate>
                            @* <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => EditRow(context.Item))"/> *@
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Add" Color="Color.Tertiary" @onclick="AddRow"/>
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" OnClick="@(() => EditRow(context.Item))"/>
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => DeleteRow(context.Item))"/>
                        </CellTemplate>
                    </TemplateColumn>
                    @* <TemplateColumn CellClass="d-flex justify-end"> *@
                    @*     <CellTemplate> *@
                    @*         <MudStack Row> *@
                    @*             $1$ <MudRating Size="@Size.Small" /> SelectedValue="@context.Item.Rating"/> #1# *@
                    @*             <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Hire</MudButton> *@
                    @*         </MudStack> *@
                    @*     </CellTemplate>a *@
                    @* </TemplateColumn> *@
                </Columns>
            </MudDataGrid>
        </MudPaper>
    </MudItem>
</MudGrid>
<br/>


@* <MudSelect @bind-Value="tenantType" Label="Coffee" AnchorOrigin="Origin.BottomCenter"> *@
@*     @foreach (TenantType item in Enum.GetValues(typeof(TenantType))) *@
@*     { *@
@*         Console.WriteLine(item); *@
@*         <MudSelectItem Value="@item">@item</MudSelectItem> *@
@*     } *@
@* </MudSelect> *@

@* <MudSelect @bind-Value="enumValue" Label="Select drink" HelperText="Enum" OpenIcon="@Icons.Material.Filled.LocalDrink" AdornmentColor="Color.Secondary"> *@
@*     @foreach (Drink item in Enum.GetValues(typeof(Drink))) *@
@*     { *@
@*         <MudSelectItem Value="@item">@item</MudSelectItem> *@
@*     } *@
@* </MudSelect> *@

@code {

    private TenantType tenantType { get; set; } = TenantType.NonSpecific;

    private IEnumerable<Services.Tenant.Models.Tenant> tenants = new List<Services.Tenant.Models.Tenant>();
    private List<string> _events = new();

    private DialogOptions options = new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Small, CloseButton = false, DisableBackdropClick = true, NoHeader = false, Position = DialogPosition.Center, CloseOnEscapeKey = false };


    protected override async Task OnInitializedAsync()
    {
        var results = await TenantService.GetAll();
        tenants = results.Value;
    }

    // events
    void StartedEditingItem(Services.Tenant.Models.Tenant item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Services.Tenant.Models.Tenant item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(Services.Tenant.Models.Tenant item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {JsonSerializer.Serialize(item)}");
    }

    private async Task EditRow(Services.Tenant.Models.Tenant tenant)
    {
        var parameters = new DialogParameters<UpsertDialog> { { x => x.tenant, tenant }, {x => x.selectedTenantType, tenant.Type.ToString()} };

        var dialog = await DialogService.ShowAsync<UpsertDialog>("Upsert", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var results = await TenantService.GetAll();
            tenants = results.Value;
        }
    }

    private async Task AddRow()
    {
        var dialog = await DialogService.ShowAsync<UpsertDialog>("Add", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var results = await TenantService.GetAll();
            tenants = results.Value;
        }
    }

    private async Task DeleteRow(Services.Tenant.Models.Tenant tenant)
    {
        var parameters = new DialogParameters<DeleteDialog>();
        parameters.Add(x => x.ContentText, "Delete selected tenant?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        DialogService.Show<DeleteDialog>("Delete", parameters, options);
    }
}
